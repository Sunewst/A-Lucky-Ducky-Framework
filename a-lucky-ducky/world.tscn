[gd_scene load_steps=13 format=3 uid="uid://cvmjlwn0k5vjv"]

[ext_resource type="PackedScene" uid="uid://06c4vdmsaoe6" path="res://land.tscn" id="1_aqk2v"]
[ext_resource type="Script" uid="uid://bgtgv8c7khc0k" path="res://scripts/camera_controls.gd" id="1_fj7yv"]
[ext_resource type="Script" uid="uid://coo455qimvsvw" path="res://SimpleSerialController.cs" id="1_tlwt5"]
[ext_resource type="Script" uid="uid://do000sg0pn2mi" path="res://scripts/testCubeScript.gd" id="3_aqk2v"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_gv5m4"]
ground_bottom_color = Color(0.123553, 0.1017, 0.0763148, 1)
ground_horizon_color = Color(0.643221, 0.655729, 0.674393, 1)

[sub_resource type="Sky" id="Sky_f3sb7"]
sky_material = SubResource("ProceduralSkyMaterial_gv5m4")

[sub_resource type="Environment" id="Environment_fj7yv"]
background_mode = 2
sky = SubResource("Sky_f3sb7")
tonemap_mode = 2
fog_mode = 1
fog_density = 1.0

[sub_resource type="BoxMesh" id="BoxMesh_f3sb7"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_aqk2v"]
albedo_color = Color(1, 1, 0.145098, 1)

[sub_resource type="Shader" id="Shader_fj7yv"]
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D screen_texture : source_color, hint_screen_texture, filter_nearest;
uniform sampler2D depth_texture : source_color, hint_depth_texture, filter_nearest;
uniform sampler2D normal_texture : source_color, hint_normal_roughness_texture, filter_nearest;

uniform float depth_threshold : hint_range(0, 1) = 0.05;
uniform float reverse_depth_threshold : hint_range(0, 1) = 0.25;
uniform float normal_threshold : hint_range(0, 1) = 0.6;

uniform float darken_amount : hint_range(0, 1, 0.01) = 0.3;
uniform float lighten_amount : hint_range(0, 10, 0.01) = 1.5;

uniform vec3 normal_edge_bias = vec3(1, 1, 1);
uniform vec3 light_direction = vec3(-0.96, -0.18, 0.2);

float get_depth(vec2 screen_uv, mat4 inv_projection_matrix) {
	float depth = texture(depth_texture, screen_uv).r;
	vec3 ndc = vec3(screen_uv * 2.0 - 1.0, depth);
	vec4 view = inv_projection_matrix * vec4(ndc, 1.0);
	view.xyz /= view.w;
	return -view.z;
}

void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}

void fragment() {
	float depth = get_depth(SCREEN_UV, INV_PROJECTION_MATRIX);
	vec3 normal = texture(normal_texture, SCREEN_UV).xyz * 2.0 - 1.0;
	vec2 texel_size = 1.0 / VIEWPORT_SIZE.xy;

	vec2 uvs[4];
	uvs[0] = vec2(SCREEN_UV.x, min(1.0 - 0.001, SCREEN_UV.y + texel_size.y));
	uvs[1] = vec2(SCREEN_UV.x, max(0.0, SCREEN_UV.y - texel_size.y));
	uvs[2] = vec2(min(1.0 - 0.001, SCREEN_UV.x + texel_size.x), SCREEN_UV.y);
	uvs[3] = vec2(max(0.0, SCREEN_UV.x - texel_size.x), SCREEN_UV.y);

	float depth_diff = 0.0;
	float depth_diff_reversed = 0.0;
	float nearest_depth = depth;
	vec2 nearest_uv = SCREEN_UV;

	float normal_sum = 0.0;
	for (int i = 0; i < 4; i++) {
		float d = get_depth(uvs[i], INV_PROJECTION_MATRIX);
		depth_diff += depth - d;
		depth_diff_reversed += d - depth;

		if (d < nearest_depth) {
			nearest_depth = d;
			nearest_uv = uvs[i];
		}

		vec3 n = texture(normal_texture, uvs[i]).xyz * 2.0 - 1.0;
		vec3 normal_diff = normal - n;

		// Edge pixels should yield to the normal closest to the bias direction
		float normal_bias_diff = dot(normal_diff, normal_edge_bias);
		float normal_indicator = smoothstep(-0.01, 0.01, normal_bias_diff);

		normal_sum += dot(normal_diff, normal_diff) * normal_indicator;
	}
	float depth_edge = step(depth_threshold, depth_diff);

	// The reverse depth sum produces depth lines inside of the object, but they don't look as nice as the normal depth_diff
	// Instead, we can use this value to mask the normal edge along the outside of the object
	float reverse_depth_edge = step(reverse_depth_threshold, depth_diff_reversed);

	float indicator = sqrt(normal_sum);
	float normal_edge = step(normal_threshold, indicator - reverse_depth_edge);

	vec3 original = texture(screen_texture, SCREEN_UV).rgb;
	vec3 nearest = texture(screen_texture, nearest_uv).rgb;

	mat3 view_to_world_normal_mat = mat3(
            INV_VIEW_MATRIX[0].xyz,
            INV_VIEW_MATRIX[1].xyz,
            INV_VIEW_MATRIX[2].xyz
	);
	float ld = dot((view_to_world_normal_mat * normal), normalize(light_direction));

	vec3 depth_col = nearest * darken_amount;
	vec3 normal_col = original * (ld > 0.0 ? darken_amount : lighten_amount);
	vec3 edge_mix = mix(normal_col, depth_col, depth_edge);

	ALBEDO = mix(original, edge_mix, (depth_edge > 0.0 ? depth_edge : normal_edge));
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fj7yv"]
render_priority = 0
shader = SubResource("Shader_fj7yv")
shader_parameter/depth_threshold = 0.05
shader_parameter/reverse_depth_threshold = 0.25
shader_parameter/normal_threshold = 0.6
shader_parameter/darken_amount = 0.3
shader_parameter/lighten_amount = 1.5
shader_parameter/normal_edge_bias = Vector3(1, 1, 1)
shader_parameter/light_direction = Vector3(-0.96, -0.18, 0.2)

[sub_resource type="QuadMesh" id="QuadMesh_tlwt5"]
material = SubResource("ShaderMaterial_fj7yv")
flip_faces = true
size = Vector2(2, 2)

[node name="World" type="Node3D"]

[node name="SimpleSerialController" type="Node" parent="."]
script = ExtResource("1_tlwt5")

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
texture_filter = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 2
stretch = true
stretch_shrink = 5

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
handle_input_locally = false
size = Vector2i(230, 129)
render_target_update_mode = 4

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(-0.863513, -0.431923, 0.260361, -0.377291, 0.895833, 0.234809, -0.334659, 0.104529, -0.936524, 0.00352669, 1.47208, -3.78418)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="SubViewportContainer/SubViewport"]
environment = SubResource("Environment_fj7yv")

[node name="land" parent="SubViewportContainer/SubViewport" instance=ExtResource("1_aqk2v")]
transform = Transform3D(20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0)

[node name="Cube" type="MeshInstance3D" parent="SubViewportContainer/SubViewport"]
unique_name_in_owner = true
transform = Transform3D(0.652125, 0, 0.758112, 0, 1, 0, -0.758112, 0, 0.652125, -1.71668, 1.4981, -3.48008)
mesh = SubResource("BoxMesh_f3sb7")
surface_material_override/0 = SubResource("StandardMaterial3D_aqk2v")
script = ExtResource("3_aqk2v")

[node name="CameraControls" type="Node3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 0.866025, 0.5, 0, -0.5, 0.866025, -0.000476569, 0.46578, -0.423462)
script = ExtResource("1_fj7yv")

[node name="Camera3D" type="Camera3D" parent="SubViewportContainer/SubViewport/CameraControls"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.87833, 50.8858)
projection = 1
size = 8.0
far = 200.0

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/CameraControls/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 0.866025, -0.5, 0, 0.5, 0.866025, 0.43998, 0.0500045, -0.175917)
extra_cull_margin = 16384.0
mesh = SubResource("QuadMesh_tlwt5")
skeleton = NodePath("../../../../..")

[connection signal="SerialError" from="SimpleSerialController" to="SubViewportContainer/SubViewport/Cube" method="_on_simple_serial_controller_serial_error"]
